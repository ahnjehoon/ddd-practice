version: '3.8'

services:
  kafka-1:
    image: ${KAFKA_IMAGE}:${PLATFORM_VERSION}
    hostname: kafka-1
    container_name: kafka-1
    networks:
      - kafka-net
    ports:
      - "19092:19092"
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    environment:
      # ========= KRaft 모드 필수 설정 =========
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      # 컨트롤러 노드 목록 
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}

      # ========= 리스너 설정 (외부 접속 가능) =========
      # 1. 리스너 분리: 내부 통신용(PLAINTEXT), 외부 접속용(PLAINTEXT_HOST), 컨트롤러용(CONTROLLER)
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093'
      # 2. 외부 접속 주소 명시: 각 리스너에 맞는 주소를 알려줌
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:19092'
      # 3. 리스너 프로토콜 맵핑: 새로 추가한 PLAINTEXT_HOST를 맵에 추가
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'

      # ========= 로깅 및 안정성 관련 주요 설정 =========
      # 컨슈머 그룹의 오프셋을 저장하는 내부 토픽(__consumer_offsets)의 복제본 수
      # 브로커 장애 시 오프셋 정보 유실을 막기 위해 브로커 수(3)와 동일하게 설정하는 것이 일반적
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      # 컨슈머 그룹에 새로운 멤버가 참여했을 때, 첫 리밸런싱을 시작하기 전까지 대기하는 시간(ms)
      # 0으로 설정하면 즉시 리밸런싱을 시작하여 개발 환경에서 빠른 확인이 가능
      # 프로덕션에서는 불필요한 리밸런싱을 막기 위해 3000(3초) 등으로 설정하기도 함
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # 정확히 한 번 전송(Exactly-Once Semantics)을 위해 트랜잭션 상태를 기록하는 내부 토픽(__transaction_state)의 복제본 수
      # 트랜잭션을 사용하는 경우, 데이터 정합성을 위해 브로커 수(3)로 설정하여 안정성을 높임
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      # 트랜잭션 로그 토픽에 대해 프로듀서가 ISR(In-Sync Replicas)에 포함된 것으로 간주하는 최소 복제본 수
      # Replication Factor가 3일 때 2로 설정하면, 브로커 1대가 다운되어도 트랜잭션 처리를 지속할 수 있음
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2

  kafka-2:
    image: ${KAFKA_IMAGE}:${PLATFORM_VERSION}
    hostname: kafka-2
    container_name: kafka-2
    networks:
      - kafka-net
    ports:
      - "29092:29092"
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2

  kafka-3:
    image: ${KAFKA_IMAGE}:${PLATFORM_VERSION}
    hostname: kafka-3
    container_name: kafka-3
    networks:
      - kafka-net
    ports:
      - "39092:39092"
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:39092,CONTROLLER://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2

# Docker 볼륨 정의 (데이터 영속성)
volumes:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:

# Docker 네트워크 정의
networks:
  kafka-net:
    driver: bridge